import {globalCounter, projects} from './initialize.js';

//pageID used to display ID of the project at the top of the page
global.pageID = 0;

//Recieves Todo as parameter, display it in the content div
const renderTodo = (obj) => {
  let title = document.createElement('p');
  title.innerText = obj.title;
  let description = document.createElement('p');
  description.innerText = obj.description;
  let dueDate = document.createElement('p');
  dueDate.innerText = obj.dueDate;
  let priority = document.createElement('p');
  priority.innerText = obj.priority;
  let container = document.createElement('div');
  container.setAttribute('class', 'Todo-container');
  container.appendChild(title);
  container.appendChild(description);
  container.appendChild(dueDate);
  container.appendChild(priority);
  appendDeleteAndCompleteTodoButton(obj, container);
  document.getElementById('content').appendChild(container);
}

const logTodo = (obj) => {
  console.log(obj.title);
  console.log(obj.description);
  console.log(obj.dueDate);
  console.log(obj.priority);
}


//Display form when add Todo button is clicked
const activateTodoForm = () => {
  document.getElementById('TodoForm').classList.remove('inactive');
}

//Remove form from DOM when Todo is submitted
const deactivateTodoForm = () => {
  document.getElementById('TodoForm').classList.add('inactive');
}

//Display add Todo and erase content buttons after form is submitted
const activateTopbarButtons = () => {
  document.getElementById('eraseBTN').classList.remove('inactive');
  document.getElementById('addToDoBTN').classList.remove('inactive');;
}

//Remove add Todo and erase content buttons from DOM when add Todo is clicked
const deactivateTopbarButtons = () => {
  document.getElementById('eraseBTN').classList.add('inactive');
  document.getElementById('addToDoBTN').classList.add('inactive');
}

//Add delete button to a Todo passed into this function
function appendDeleteAndCompleteTodoButton(obj, input) {
  let deleteTodoBTN = document.createElement('button');
  deleteTodoBTN.innerText = "Delete Todo";
  deleteTodoBTN.classList.add('deleteTodoBTN')
  input.appendChild(deleteTodoBTN);
  deleteTodoBTN.addEventListener('click', deleteTodo, false);
  deleteTodoBTN.myParam = deleteTodoBTN.parentElement;
  deleteTodoBTN.myParamObj = obj;

  let completeBTN = document.createElement('button');
  completeBTN.innerText = "Complete Todo";
  completeBTN.classList.add('completeBTN')
  input.appendChild(completeBTN);
  completeBTN.addEventListener('click', completeTodo, false);
  completeBTN.myParam2 = completeBTN.parentElement;
}

//Deletes Todo passed into this function
function deleteTodo(evt) {
  console.log("target todo:")
  console.log(evt.currentTarget.myParamObj);
  evt.currentTarget.myParam.remove();
  for (const i in projects) {
    console.log(i);
    if (projects[i].id == global.pageID) {
      console.log("target project:")
      console.log(projects[i].todoArr);
      for (const j in projects[i].todoArr) {
        if(projects[i].todoArr[j].title == evt.currentTarget.myParamObj.title && projects[i].todoArr[j].description == evt.currentTarget.myParamObj.description &&
          projects[i].todoArr[j].dueDate == evt.currentTarget.myParamObj.dueDate && projects[i].todoArr[j].priority == evt.currentTarget.myParamObj.priority)
        {
          console.log(projects[i].todoArr[j]);

          //array.splice(i, 1);

          projects[i].todoArr.splice(j, 1);
          console.log("result:");
          console.log(projects[i].todoArr);
        }
      }
    }
  }
}

//Marks Todo as complete
function completeTodo(evt) {
  if(!evt.currentTarget.myParam2.hasAttribute('id')){
    evt.currentTarget.completed = true;
    // console.log(evt.currentTarget);
    evt.currentTarget.myParam2.setAttribute('id', 'complete');
  }
}

//display create project button after project form is submitted
const activateCreateProjectBTN = () => {
  document.getElementById('addProjectBTN').classList.remove('inactive')
}
//hide create project button after it is clicked
const deactivateCreateProjectBTN = () => {
  document.getElementById('addProjectBTN').classList.add('inactive')
}

//display project form when create project button is clicked
const activateProjectForm = () => {
  document.getElementById('projectForm').classList.remove('inactive')
}
//hide project form after it is submitted
const deactivateProjectForm = () => {
  document.getElementById('projectForm').classList.add('inactive')
}

//called when project form is submitted
const renderProjectTitleBTN = () => {
  const projectButton = document.createElement('button');
  projectButton.innerText = projectName.value;
  projectButton.setAttribute('id', globalCounter);
  document.getElementById('side-bar').appendChild(projectButton);
  document.getElementById('projectForm').reset();
  projectButton.addEventListener('click', function(){
    
    global.pageID = projectButton.getAttribute('id');
    //displays current project name and id at top of page
    document.getElementById('currentProjectDisplay').innerText = `Current Project: ${projectButton.innerText} (ID:${global.pageID})`;
    //find project correlated to sidebar button and render it
    for (const i in projects) {
      if (projects[i].id == global.pageID) {
        // console.log(projects[i]);
        renderProject(projects[i].todoArr)
      }
    }
  })
}

const renderProject = (project) => {
  document.getElementById('content').innerHTML = "";
  for (const i in project) {
    renderTodo(project[i]);
  }
}

export {
  renderTodo,
  activateTodoForm,
  deactivateTodoForm,
  deactivateTopbarButtons,
  activateTopbarButtons,
  renderProjectTitleBTN,
  activateProjectForm,
  deactivateProjectForm,
  activateCreateProjectBTN,
  deactivateCreateProjectBTN,
  renderProject
};